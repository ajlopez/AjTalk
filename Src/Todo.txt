
- Refactor ExecutionBlock: bytecode processing

+ Remove EndOfInput exception in Lexer processing

- Improve Integer parsing (with radix) in Parser and Model Parser

- Set Argument?

- super for NativeBehaviors

- Clear Stack in Execution block (at . (dot)?)

- Review all Convert.ToInt32, it should be a common method, supporting 16rFF

- Load Pharo Kernel Numbers using VmCompiler

+ CHECK if a class is redefined IN THE CURRENT CONTEXT, not .GetGlobalObject, see Machine code

- Review Bytecode.GetArgument
	Apparently, it uses the number of argument, but block has the names too
	Same for Bytecode.GetLocal

+ Define Array implementation
   #(1 2 3) as IList<object>? or new object[3]
   
- Implement SetArgument

- Implement +, -, etc... only for numbers
	Actually, + is concatenating strings
	
- block fork using thread
- Process
- block fork using Process
   
- Implement FreeBlockExpression in Javascript compilers

- Methods for Object
	==, ~=, ~~, =
	at:, at:put:, size, basicSize, ...
	isKindOf:
	class
	isMemberOf:
	error:
	isNil, isNotNil...
	ifTrue:, ifTrue:ifFalse, ... (or in Boolean??)
	subclassResponsability
	yourself
	asRemote, asTransactional, asAgent
	
= Methods for Behavior
	compile:
	new
	new:
	basicNew
	basicNew:
	
- Class and instances variables mapped to properties, variables in existing classes
	BaseObject, BaseBehavior, BaseClassDescription, BaseClass, BaseMetaClass
	
- Predicates for native objects
	==, ~=, ~~, =

= Add method support to native types
= do: over ICollection, IEnumerable
= Boolean: true, false as native, but with Boolean methods
+ Real number support
+ Chunk Reader and processing
- Get Categories for classes
- Categories for methods
- Image serialization
- Class fileout
- Browser
- Transcript
- Workspace
+ Console app (reading console as chunks)
- agents example
- Initial class library
- Bootstrap
- Review time1 > time2 in transaction management
+ Parse #(1 2 3)
+ do: with IEnumerable
+ select: with IEnumerable

- Resolve height instead seft height
	in native objects and IObject (.CompileSet I guess in Block)
!Rectangle methods!
area
	^self height * self width
! !


Examples

- Agent 1
- Agent 2
- Servidor 1
- Cliente 1
- Servidor 2
- Cliente 2
- WinForm 1
- WinForm 2
- Native Type 1
- Transaction?

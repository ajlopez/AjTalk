AjTalk

An Smalltalk-like interpreter, written in C#.

Work in progress.

2007-09-15
Creation of this project folder

2008-05-04
Begin to work with TDD (late but sure)

2008-07-11
Publish the code in Google Code

2008-08-24
Add support for local variables in compiling method

2008-09-28
Skip comments in tokenizer
More test for Method
Compile global name in Method
Set/Get global bytecodes
Global objects in Machine
Symbol support in tokenizer
Method inherits from Block
Loader from file and tests

2008-10-13
Update to VS 2008
VS Tests instead NUnit tests
Loader support for subclassing, instance variables,
	and method definition

2008-12-21
Support for [ block ] in compiler and execution block
	(no parameters yet)
Initial .NET object creation and method invocation

2008-12-25
Test loading Library1.st
methods without ^ return self

2008-12-26
Test using Library1.st added

2008-12-27
BaseClass new tests
New bytecodes instSize, instAt: instAt:put:

2008-12-28
IBehavior, IClassDescription added
BaseBehavior, BaseClassDescription added

2009-01-18
Reimplementing .NET object support
New ByteCodes GetDotNetType, NewDotNetObject, InvokeDotNet
StyleCop applied
Send message basicNew as bytecode NewObject
Special treatment for new on Behavior, ClassDescription

2010-07-11
Renaming test methods
Fix ifFalse: using block

2010-07-24
Renaming Tokenizer to Lexer
Renaming Compiler to Parser
New AjTalk.Compiler namespace
New AjTalk.Language namespace
New folders in tests
First EvaluateTests

2010-07-30
NativeBehavior with tests
IBehavior.NewObject returns object instead of IObject
nativeSelf in ExecutionBlock
DotNetObject.SendNativeMethod, .SendNativeStaticMethod with tests
DotNetObject.SendMessage (WIP)
bytecode .Send manage native object or IObject

2010-09-12
subclass:nativeType: support in test, DoesNotUnderstand
new example test NativeBahevior.st
IMetaClass
BaseMetaClass
BaseBehaviorTests
new example test NativeFileInfo.st
BaseIndexedObjectTests
BehabiorDoesNotUnderstandMethod
.Superclass as IBehavior

2010-09-18
class methods support in Loader
new and class in DoesNotUnderstandMethod
new example DefineRectangleWithNewAndInitialize.st
DoesNotUnderstandMethod and BehaviorDoesNotUnderstandMethod now in core, and in Machine
AjTalk.Gui with first Transcript
Refactor of ByteCode processing (WIP)

2010-09-19
Add ; (semicolon) support in lexer, parser, with tests
Message
MessageQueue with tests
AgentObject with tests
agent: support in nil, BehaviorDoesNotUnderstand

2010-09-25
minimal Browser in AjTalk.Gui (WIP)
Boot.st in AjTalk.Gui
ClassDescriptor.ToDefineString
IClass.Category
IClassDescription.GetInstanceVariableNames
IClassDescription.GetClassVariableNames
Move BaseClassDescription.classvariablenames to MetaClass

2010-09-26
Fix BaseClass.ToDefineString
Show class define in Browser
Refactoring Loader
Todo.txt

2010-10-10
BaseClass.ToOutputString() with tests
BaseObject Serializable, ISerialize implements, with tests
Hosting namespace
IHost interface
Host with first tests
ObjectProxy WIP
RemotingHostServer, RemotingHostClient, ClientObject, with tests

2010-10-11
Support in DotNativeObject for set properties, with tests
Now, Method accepts IBehavior instead IClassDescription in constructor
New example NativeRectangle.st with tests
TypeUtilities for resolve types using .AsType(string). Type.GetType() only works in the calling assembly
Fixing lexer bug: !new) now is two tokens !new and )
RemotingHostServer.st example with tests
RemotingHostClient.st example with tests

2010-10-17
RemoteObject with tests
RemotingHostServer.st example with remote object
RemotingHostClient.st example with remote object
Transaction (WIP)
TransactionalValue (WIP) with tests

2010-10-20
New Class Diagrams

2010-10-22
static methods in .NET invoked without !
Few tests added for .NET method invocation

2010-10-24
IObjectDecorator
TransactionManager
TransactionalObject with tests
More tests for TransactionalValue

2010-11-07
CollectionBehavior, .Do and .Select
binaryMethods in DotNetObject
binaryOperators in Parser
Drop Add, Substract... bytecodes
Block.CompileBinarySend
do: for IEnumerable with tests
select: for IEnumerable with tests
ObjectOperators with tests
BooleanBehavior, used in Machine and DotNetObject, with Tests

2010-11-11
AjTalk.Console
Remoting modification (ChannelServices.RegisterChannel once)
Programs examples in AjTalk.Console
Downloader.st

2010-11-12
TransactionManager as property in Machine
Programs\Transactions.st
Programs\TransactionExample.st

2010-11-13
TransactionExample.st fixed
RunAll.cmd, RunTransaction.cmd in AjTalk.Console

2010-11-20
BaseMetaClassTests
BaseMetaClass.CreateClass with tests
Machine.CreateClass to use BaseMetaClass
BehaviorDoesNotUnderstand using the new Machine.CreateClass methods
IBehavior in constructors
BaseBehavior now receives an IBehavior as first parameter in constructor
NativeBehavior now receives an IBehavior as first constructor parameter
nil removed as GlobalObject in Machine
Machine.UndefinedObjectClass
Machine.ClassClass
Machine.MetaClassClass
Send bytecode use Machine.UndefinedObjectClass if receiver is null
Object.st new test
Class.st new test, defining Class protocol
Behavior.st new test, defining compile: in Behavior. Knot: Behavior is Object class superclass.
Class.st, Library.st: Knot added: Class is Object class superclass. Removed from Machine source code.

2010-11-21
Test splited: Object.st + ObjectTest.st, Behavior.st + BehaviorTest.st, Class.st + ClassTest.st
New parsing of binary operators
Define = == methods in Object.st with Tests in ObjectTest.st
Define ~= ~~ methods in Object.st with Tests in ObjectTest.st
ObjectOperators.Same, .Negate, .IsNull
Fixing bug: aBoolean ifTrue: [self ... ] <-- self was null. Now, using LocalBlock, quick hack
Tests: new folders Library, LibraryTests
Test.st for testing
Object>>error:
Primitives.RaiseException
ErrorException

2010-11-22
LocalBlock deleted
block.Closure points to external ExecutionBlock
new Block(block, executionclosure)
New ExecutionBlock constructor using block.Closure
ExecutionBlock.NoLocals, .NoParentLocals, .NoArguments, .NoParentArguments
All this to implement closure in blocks

2011-09-16
AST with first TreeParser and tests

2011-09-17
AST Removed
Model, IExpression, ConstantExpression, InstanceVariableExpression, SelfExpression
and MessageExpresion
ModelParse with tests
IExpression.AsString with tests
CompositeExpression with tests
MethodModel with parse and initial tests

2011-09-18
SetExpression with parse support and tests
Local variables in method parse with tests
ReturnExpression with parse support and tests
IVisitor, IVisitable in MethodModel, IExpression, expressions
ICompiler, AbstractCompiler
Compilers/Javascript/Compiler with first tests

2011-09-24
ClassModel, in MethodModel and ModelParser, and compile support with tests
ClassVariableExpression, InstanceVariableExpression, with ModelParser support and tests

2011-09-25
ChunkReader with tests
FileOut01.st file for tests (taken from Squeak Object file out)
CodeModel used in CodeReader
CodeReader with tests
BlockExpression used in ModelParser and CodeReader tests
SymbolExpression used in ModelParser and CodeReader tests
PrimitiveExpression usind in ModelParser tests
FileOut01.st First compile to Javascript in test
FileOut02.st First compile to Javascript in test

2011-10-01
SourceWriter with tests
SourceWriter used by Javascript Compiler
TokenType.Parameter
ModelParse support for: parameter in blocks, local variables in blocks
BlockExpression with paramteres and local variables
SqueakObject.st for parser tests
Fluent Message
CollectionExpression 
ModelParser parse #(...) collections

2011-10-02
CollectionExpression renamed to ArrayExpression
DynamicArrayExpression and support for { ... } in ModelParser with tests
Removing CompositeExpression
ModelParser refactor to support nested expressions
MessageExpression.AsString taking precedence into account
Completing Javascript Compiler Visit methods
Fixed Primitive parse as separate expression
AjTalk.Compiler compiling Squeak Object.st to Program.js

2011-10-09
1 add: 2 -> Number(1).$add_(2)  Same for Strings
Fixed precedence in MessageExpression.AsString
Operators ->, =, ~= compiled as names
new, class variable names as __new__, __class__
@ as operator with name
false, true as target, compiled as Boolean(false), Boolean(true)
Compile Object.st to javascript and run in node (no syntax error)

2011-10-13
Class Model for post
Post http://ajlopez.wordpress.com/2011/10/13/ajtalk-and-javascript-part-1-abstract-model/

2011-10-22
Generate Class instance for each defined class

2011-10-23
Primitive first implementation
Compile to use exports to expose classes in NodeJs
Compiling SqueakKernelObjects (WIP)
Primitive with name and module (WIP)

2011-10-29
Compile SqueakKernelObjects
Compile PharoCoreKernelObjects
Compile PharoCorePoint
Compile PharoCoreRectangle 
Use send(...) in Javascript

2011-10-30
Real numbers in Parser, ModelParser with tests
Unary - as message
Archive: old generated .js wo/send(..)
NodeJs ajtalk.js review (not in trunk, yet)
Real number in lexer, Parser, ModelParser, with tests
Processing instance variables from subclass:.. message with tests
Processing class variables from subclass:.. message with tests
AClass.classPrototype = AClassClass.prototype;
AClass.prototype.__class = AClassClass.prototype;
sendSuper invocation

Angel "Java" Lopez
http://www.ajlopez.com/en
http://ajlopez.wordpress.com/

